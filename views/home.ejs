<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monaco Editor with Output</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.30.1/min/vs/editor/editor.main.css">

    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>

    <style>
        body {
            background-color: #282a36;
            color: white;
            font-family: Arial, sans-serif;
        }
        .flex-container {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 10px;
        }
        .flex-item {
            width: calc(50% - 10px); /* 50% width with margin between items */
        }
        #container {
            width: 100%;
            height: 400px;
            border: 1px solid grey;
            margin-bottom: 10px;
        }
        #output {
            width: 100%;
            height: 200px;
            border: 1px solid grey;
            padding: 10px;
            overflow-y: scroll;
            background-color: black;
            color: white;
            white-space: pre-wrap; /* Preserve line breaks */
        }
        button {
            margin-top: 10px;
            padding: 10px;
        }
        #input-container {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }
        #input-label {
            margin-right: 10px;
            font-size: 16px;
        }
        #input {
            width: 300px;
            height: 25px;
            resize: none;
        }
    </style>
</head>
<body>
  <nav style="height: 45px;
  background: #0e141e;">
  <div class="container-fluid" style="color: white;">
    <a class="navbar-brand" href="#">
      Collab&Code
    </a>
  </div>
</nav>
  <div class="flex-container" style="height: 35px;
  position: absolute;
  /* left: 0px; */
  /* justify-content: center; */
  position: relative;
  /* margin-top: 15px; */
  justify-content: center;
  margin-top: 15px;
  align-items: center
">
      <div class="flex-item" style="width: auto;
      position: absolute;
      left: 15px;
      margin-left: 15px;">
          <label for="language-select">Select Language:</label>
          <select id="language-select" onchange="changeLanguage()">
              <option value="python3">Python 3</option>
              <option value="java">Java</option>
              <option value="c">C</option>
              <option value="cpp">C++</option>
              <option value="csharp">C#</option>
              <option value="go">Go</option>
              <option value="kotlin">Kotlin</option>
              <option value="php">PHP</option>
              <option value="ruby">Ruby</option>
              <option value="rust">Rust</option>
              <option value="swift">Swift</option>
          </select>   
      </div>
      <div class="flex-item" id="input-container" style="position: absolute;
      width: auto;
      left: 260px;
      margin-top: 0px;">
          <label id="input-label" for="input" style="margin-left:25px ;">Input:</label>
          <textarea id="input" style="width: 150px;height: 25px;"></textarea>
      </div>
      <button onclick="generateBoilerplate()" style="margin-top: 0px;right: 180px;
      position: absolute;
      width: 185px;
      height: 35px;
      padding: 0px;
      border-radius: 15px;
      font-size: small;
      font-weight: bold;background-color: #20D761;">Generate Boilerplate</button>
      <button onclick="runCode()" style="    position: absolute;
      height: 35px;
      width: 90px;
      padding: 0;
      font-size: small;
      font-weight: bold;
      border-radius: 15px;
      margin-bottom: 0px;
      right: 85px;margin-top:0px;background-color: #20D761;">Run</button>
      
  </div>
  <div id="container"></div>
  <div id="output"></div>
  

  <script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"></script>
  <script>
      require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.30.1/min/vs' }});

      let editor;
      let outputElement = document.getElementById('output');
      let languageSelect = document.getElementById('language-select');
      let inputElement = document.getElementById('input');

      require(['vs/editor/editor.main'], function() {
          editor = monaco.editor.create(document.getElementById('container'), {
              value: '',
              language: 'python3',
              theme: 'vs-dark' // Set the theme to dark
          });

          // Register additional languages for syntax highlighting
          monaco.languages.register({ id: 'java' });
          monaco.languages.register({ id: 'c' });
          monaco.languages.register({ id: 'cpp' });
          monaco.languages.register({ id: 'csharp' });
          monaco.languages.register({ id: 'go' });
          monaco.languages.register({ id: 'kotlin' });
          monaco.languages.register({ id: 'php' });
          monaco.languages.register({ id: 'ruby' });
          monaco.languages.register({ id: 'rust' });
          monaco.languages.register({ id: 'swift' });

          // Load the language-specific syntax definitions
          require(['vs/basic-languages/java/java.contribution', 'vs/basic-languages/c/c.contribution', 'vs/basic-languages/cpp/cpp.contribution',
              'vs/basic-languages/csharp/csharp.contribution', 'vs/basic-languages/go/go.contribution', 'vs/basic-languages/kotlin/kotlin.contribution',
              'vs/basic-languages/php/php.contribution', 'vs/basic-languages/ruby/ruby.contribution', 'vs/basic-languages/rust/rust.contribution',
              'vs/basic-languages/swift/swift.contribution'], function () {
              // Set the initial language based on the dropdown selection
              let initialLanguage = languageSelect.value;
              monaco.editor.setModelLanguage(editor.getModel(), initialLanguage);
          });
      });

      function changeLanguage() {
          let selectedLanguage = languageSelect.value;
          monaco.editor.setModelLanguage(editor.getModel(), selectedLanguage);
      }

      function generateBoilerplate() {
          outputElement.textContent = ''; // Clear previous output

          // Get selected language from dropdown
          let selectedLanguage = languageSelect.value;

          // Generate boilerplate code based on selected language
          let boilerplateCode = generateCodeTemplate(selectedLanguage);

          // Set editor value to boilerplate code
          editor.setValue(boilerplateCode);
      }

      async function runCode() {
          outputElement.textContent = ''; // Clear previous output

          // Get code from editor
          let code = editor.getValue();
          let language = languageSelect.value;
          let input = inputElement.value.trim();

          const url = 'https://online-code-compiler.p.rapidapi.com/v1/';
          const options = {
              method: 'POST',
              headers: {
                  'x-rapidapi-key': 'e68dc4246fmsh9fd8cd7b8329d39p151f39jsne7fc8d54ffb0',
                  'x-rapidapi-host': 'online-code-compiler.p.rapidapi.com',
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                  language: language,
                  version: 'latest',
                  code: code,
                  input: input
              })
          };

          try {
              const response = await fetch(url, options);
              const data = await response.json();
              
              // Check if the response is successful
              if (response.ok) {
                  // Display output only if there is input provided
                  if (input !== '') {
                      outputElement.textContent += `Input:\n${input}\n\n`;
                  }
                  let output = data.output || data.stdout || data.result || 'No output found';
                  outputElement.textContent += `Output:\n${output.trim()}`;
              } else {
                  outputElement.textContent = 'Error: ' + data.message || 'Failed to execute';
              }
          } catch (error) {
              outputElement.textContent = 'Error: ' + error.message;
          }
      }

      function generateCodeTemplate(language) {
          switch (language) {
              case 'python3':
                  return 'print("Hello, World!")';
              case 'java':
                  return 'public class Main {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println("Hello, world!");\n\t}\n}';
              case 'c':
                  return '#include <stdio.h>\n\nint main() {\n\tprintf("Hello, world!\\n");\n\treturn 0;\n}';
              case 'cpp':
                  return '#include <iostream>\n\nint main() {\n\tstd::cout << "Hello, world!" << std::endl;\n\treturn 0;\n}';
              case 'csharp':
                  return 'using System;\n\nclass Program {\n\tstatic void Main() {\n\t\tConsole.WriteLine("Hello, world!");\n\t}\n}';
              case 'go':
                  return 'package main\n\nimport "fmt"\n\nfunc main() {\n\tfmt.Println("Hello, world!")\n}';
              case 'kotlin':
                  return 'fun main() {\n\tprintln("Hello, world!")\n}';
              case 'php':
                  return '<?php\n\necho "Hello, world!";\n';
              case 'ruby':
                  return 'puts "Hello, world!"';
              case 'rust':
                  return 'fn main() {\n\tprintln!("Hello, world!");\n}';
              case 'swift':
                  return 'print("Hello, world!")';
              default:
                  return '';
          }
      }
  </script>
</body>
</html>
